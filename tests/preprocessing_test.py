import numpy as np
import support.data_preprocessing as dpre

data = np.array([[18, 11, 5, 13, 14, 9, 9, 22, 26, 24,
                  19, 0, 14, 15, 8, 16, 8, 8, 16, 7,
                  11, 10, 20, 18, 15, 14, 49, 10, 16, 18,
                  8, 5, 9, 7, 13, 0, 7, 4, 11, 10],
                 [11, 14, 15, 18, 11, 13, 22, 11, 10, 4,
                  41, 65, 57, 38, 20, 62, 44, 15, 10, 47,
                  24, 17, 0, 9, 39, 13, 11, 12, 21, 19,
                  9, 15, 33, 8, 8, 7, 13, 2, 23, 12],
                 [1, 0, 1, 1, 0, 4, 0, 3, 4, 4,
                  1, 0, 1, 6, 8, 6, 4, 5, 1, 2,
                  3, 8, 8, 6, 0, 2, 2, 3, 2, 4,
                  3, 3, 0, 3, 5, 4, 2, 5, 1, 4]])

train_X_data = np.array([[18, 11, 5, 13, 14, 9, 9, 22, 26, 24,
                          19, 0, 14, 15, 8, 16, 8, 8, 16, 7,
                          11, 10, 20, 18, 15, 14, 49, 10, 16, 18],
                         [11, 14, 15, 18, 11, 13, 22, 11, 10, 4,
                          41, 65, 57, 38, 20, 62, 44, 15, 10, 47,
                          24, 17, 0, 9, 39, 13, 11, 12, 21, 19],
                         [1, 0, 1, 1, 0, 4, 0, 3, 4, 4,
                          1, 0, 1, 6, 8, 6, 4, 5, 1, 2,
                          3, 8, 8, 6, 0, 2, 2, 3, 2, 4]])

train_y_data = np.array([[8, 5, 9, 7, 13, 0, 7, 4, 11, 10],
                         [9, 15, 33, 8, 8, 7, 13, 2, 23, 12],
                         [3, 3, 0, 3, 5, 4, 2, 5, 1, 4]])

test_data = np.array([[18, 11, 5, 13, 14, 9, 9, 22, 26, 24,
                       19, 0, 14, 15, 8, 16, 8, 8, 16, 7,
                       11, 10, 20, 18, 15, 14, 49, 10, 16, 18,
                       8, 5, 9, 7, 13, 0, 7, 4, 11, 10,
                       4, 8, 19, 6, 7, 12, 7, 14, 5, 9],
                      [11, 14, 15, 18, 11, 13, 22, 11, 10, 4,
                       41, 65, 57, 38, 20, 62, 44, 15, 10, 47,
                       24, 17, 0, 9, 39, 13, 11, 12, 21, 19,
                       9, 15, 33, 8, 8, 7, 13, 2, 23, 12,
                       4, 1, 0, 9, 3, 10, 6, 12, 21, 9],
                      [1, 0, 1, 1, 0, 4, 0, 3, 4, 4,
                       1, 0, 1, 6, 8, 6, 4, 5, 1, 2,
                       3, 8, 8, 6, 0, 2, 2, 3, 2, 4,
                       3, 3, 0, 3, 5, 4, 2, 5, 1, 4,
                       2, 1, 1, 3, 6, 2, 5, 3, 7, 3]])

test_X_data = np.array([[19, 0, 14, 15, 8, 16, 8, 8, 16, 7,
                         11, 10, 20, 18, 15, 14, 49, 10, 16, 18,
                         8, 5, 9, 7, 13, 0, 7, 4, 11, 10],
                        [41, 65, 57, 38, 20, 62, 44, 15, 10, 47,
                         24, 17, 0, 9, 39, 13, 11, 12, 21, 19,
                         9, 15, 33, 8, 8, 7, 13, 2, 23, 12],
                        [1, 0, 1, 6, 8, 6, 4, 5, 1, 2,
                         3, 8, 8, 6, 0, 2, 2, 3, 2, 4,
                         3, 3, 0, 3, 5, 4, 2, 5, 1, 4]])
                        
test_y_data = np.array([[4, 8, 19, 6, 7, 12, 7, 14, 5, 9],
                        [4, 1, 0, 9, 3, 10, 6, 12, 21, 9],
                        [2, 1, 1, 3, 6, 2, 5, 3, 7, 3]])

def test_normalise():
    norm_data = dpre.normalise_transform(data)

    # normalising should not change data shape
    assert norm_data.shape == data.shape

    reverse_data = dpre.normalise_reverse(norm_data)

    # normalise_reverse should be able to turn normalised data back to original data
    assert np.amax(abs(reverse_data - data)) < 0.00001

def test_split():
    train_X, train_y, test_X, test_y = split_data(data, test_data, pred_days=10)

    # split_data function should be able to spilt data properly
    assert train_X == train_X_data
    assert train_y == train_y_data
    assert test_X == test_y_data
    assert test_y == test_y_data
